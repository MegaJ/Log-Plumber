* {
    box-sizing: border-box;
}

h1,h2,h3{line-height:1.2}

html {
    height: 100%;
    min-height: 100%;
    overflow: hidden;
    -webkit-user-select: none;
    -webkit-user-drag: none;
    cursor: default;
}

/* From fonts.google.com under
Apache License, Version 2.0  */
/* latin */
@font-face {
  font-family: 'Open Sans Condensed';
  font-style: normal;           /*light*/
  font-weight: 300;
  src: url('./fonts/OpenSansCondensedLight.woff2') format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2212, U+2215;
}

.slant {
    font-style: italic;
}

.titular {
    font-size: 64px;
}

input::selection, textArea::selection {
    /* I think this is orange */
  background: #ffb7b7;
}

textArea::scrollbar {
    background-color: black;
}

/* Ex: copy button */
.tertiary-button {
    color: rgb(80, 80, 80);
    box-shadow:
    0px 1px #e6ffff inset,
    0px 3px 0px #999;
    background: #d5eeee linear-gradient(to bottom, #fff 5%, rgb(200, 200, 200) 100%) repeat scroll 0% 0%;
    border: none;
    border-radius: 2px;
    min-width: 4em;
    font: 14pt;
}

/* section *:hover,  */
.tertiary-button:hover,
.delegator span:hover,
.delegator label:hover {
    background: white;
    color: rgb(50, 50, 50);
    box-shadow:
    2px 3px 16px 0px rgba(255,255,255,0.5),
    -2px -3px 16px 0px rgba(255,255,255,0.5),
    0px 3px 0px #999;
}

.tertiary-button[disabled] {
    box-shadow: initial;
    background: rgb(100, 100, 100);
    color: rgb(200, 200, 200);
}

.fat-header {
    /* Sky blue  */
    background: #01b1d3;
    border-bottom: 3px solid #0081b3;
    width: 20em;
    display: block;
    padding:7px 10px;
}

.bottom-shadow {
    box-shadow: 0px 2px 16px #000;
}

.header-button-container {
    display: inline-block;
}

/* section *:active, */
.tertiary-button:active,
.delegator span:active,
.delegator label:active {
    background: #aaa;
    color: rgb(240,240,240);
    box-shadow: 0 1px #666;
    transform: translateY(4px);
}


/* screen shake idea, but I'm unsure about the performance */
/* from https://css-tricks.com/snippets/css/shake-css-keyframe-animation/ */
/* html:hover { */
/*   animation: shake 0.82s cubic-bezier(.36,.07,.19,.97) both; */
/*   transform: translate3d(0, 0, 0); */
/*   backface-visibility: hidden; */
/*   perspective: 1000px; */
/* } */

/* @keyframes shake { */
/*   10%, 90% { */
/*     transform: translate3d(-1px, 0, 0); */
/*   } */
  
/*   20%, 80% { */
/*     transform: translate3d(2px, 0, 0); */
/*   } */

/*   30%, 50%, 70% { */
/*     transform: translate3d(-4px, 0, 0); */
/*   } */

/*   40%, 60% { */
/*     transform: translate3d(4px, 0, 0); */
/*   } */
/* } */

body {
    line-height:1.6;
    font-size: 18px;
    color: #e6ffff;
    background-color: #000d33;
    margin: 0;
    height: 100%;
    min-height: 100%;
    display: flex;
    margin-left: 20px;
    margin-bottom: 20px;

    font-family: 'Open Sans Condensed', sans-serif;
}

/* body div { */
/*     margin: auto; */
/* } */


.nav {
    width: 340px;
    overflow-x: hidden;
    overflow-y: auto;
    color: var(--color-subtle);
    border-right: 1px solid var(--color-border);
    background-color: var(--color-bg);
    visibility: hidden;
    opacity: 0;
}

.content {
    /* margin-left: 40px; */
    /* margin-bottom: 20px; */
    padding: 0;
    flex: 1;
    position: relative;
    font-size:14pt;
    color: #e6ffff;
    padding:0;
    /* overflow: scroll; */
    transform: translate3d(0,0,0); /*for gpu compositing?*/
}

.section.is-shown {
    visibility: visible;
    opacity: 1;
    pointer-events: auto;
}

.section {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    visibility:hidden;
    /* overflow-x: scroll; */
    overflow-y: scroll;
    transform: translate3d(0,0,0); /*for gpu compositing?*/
    pointer-events: none;
    padding: 0px 20px 20px 20px;
}

/* main { */
/*     overflow-y: scroll; */
/* } */

.left-margin-major {
    margin-left: 3em;
}

textarea {
    width: 90%;
    display: block;
    min-height: 100px;
    white-space:pre;
    overflow: scroll;
    color: #eee;
    background-color: #778284;
    border-radius: 3px;
    text-rendering: optimizeSpeed;
}

/* If I add other selectors, this won't work for some reason  */
textarea::-webkit-input-placeholder {
/* textarea::placeholder, */
/* input::placeholder { */
    color: #bbbbbb;
}

.regexOption, .hide-checkbox{
    display: none;
}

.linker {
    font-family: Symbola;
    -webkit-user-select: auto;
    color: grey;
}

.linker-active {
    color: inherit;
}

.regexOption + label,
.regexOption + .tooltip label,
.hide-checkbox + label {
    cursor: pointer;
    color: grey;
}

.pointer {
    cursor: pointer;
}

.grey {
    color: grey;
}

.hide-checkbox:checked + label{
    color: inherit;
}

.regexOption:checked + .tooltip label.g,
.regexOption:checked + label.g
{
    color: #00ffcc;
    background: #00ffcc;
}

.regexOption:checked + .tooltip label.i,
.regexOption:checked + label.i {
    color: #66ff66;
    background: #66ff66
}

.regexOption:checked + .tooltip label.m,
.regexOption:checked + label.m {
    color: #ccff00;
    background: #ccff00
}

/* code { */
/*     display: inline-block; */
/* } */

/* 
This sequence of level-delegator rules is to visually 
indicate the linkage of levels.
*/
#level-delegator {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

#level-delegator > div {
    margin-top: 3px;
    border-radius: 3px;
    padding-left: 3px; 
    padding-right: 3px;
}

#level-delegator > div.vertical-merge {
    margin-top: initial;
}

.flex-container {
    width: 100%;
    display: inline-flex;
    align-items: center;
}

.flex-containee-small {
}

.flex-containee-large {
    flex: 2;
    width: 100%
}

.left-margin {
    margin-left: 0.5em;
}

.right-margin {
    margin-right: 0.5em;
}

/* regexInput and textInput are really the same though */
.regexInput {
    display: inline;
    font-family: "DejaVu Sans Mono";
    
/* } */

/* .textInput { */
    border-radius: 3px;
    border: 1px solid grey;
    color: #aaa;
    background-color: rgba(40,40,40,0.7);
}

.regexInput:hover {
    border: 1px solid darkorange;
}

.regexInput:focus {
    border: 1px solid #0f0;
    background-color: rgba(0,40,0,0.7);
    outline: none;
}

.regexInput.error {
   border: 1px solid #f00;
}

.button:focus {
    outline: none;
}

/* make this a class so naming is clear */

.dejaVuBold {
        font-size: 16px;
        font-family: "DejaVu Sans Mono Bold";
}

.dejaVu {
    font-family: "DejaVu Sans Mono";
}

/* Tooltip CSS taken from https://www.w3schools.com/css/css_tooltip.asp */
.tooltip {
    position: relative;
    display: inline-block;
    padding: 0;
    margin: 0;
}

.tooltip .tooltiptext {
    visibility: hidden;
    opacity: 0;
    width: 180px;
    background-color: #61709e; /* purple */
    color: #fff;
    text-align: left;
    padding: 5px 5px;
    border-radius: 0px 6px 6px 6px;
    font-family: 'Open Sans Condensed', sans-serif;

    /* Position the tooltip */
    position: absolute;
    z-index: 9999;
    top: 100%;
    left: 50%;
}

.tooltip:hover .tooltiptext {
    visibility: visible;
    opacity: 1;
}

.tooltip .tooltiptext::after {
    content: " ";
    position: absolute;
    bottom: 100%;  /* At the top of the tooltip */
    left: 2%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: transparent transparent  #61709e transparent;
}

.removeRegex {
    font-size: 13px;
}

#treeView {
    -webkit-user-select: initial;
    cursor: text;               /* doesnt...work?*/
}

ol {
    background: rgba(50, 120, 10, .2);
    counter-reset: depth;
    list-style-type: none;
}

li:before {
  counter-increment: depth;
  content: counters(depth, ".") ". ";
}

/* 
Today is 29/01/2016
Chromium does not update the selection text
after a found-in-page event is emitted. I cannot get the DOM element in a straightforward way.
If webContents.findInPage() is updated, it may be possible.
If Chromium updates this in the future I can search 0pt font and expand the necessary DOM elements and make them visible 
For now, I can check all checkboxes when search is fired... :|
  */
li input + ol > li {
    display: none;

    /* font-size: 0; */
    
    margin-left: -14px !important;
    padding-left: 1px;
}

li input:checked + ol > li {
    display: block;
    /* font-size: 18px; */
    margin: 0 0 0.125em;
    white-space: pre-wrap;
}

/* 
Floats the checkbox to the left of the label
even though in DOM structure, checkbox is after label
 */
li > input {
    position: absolute;
    display: inline-block;
    float: left;
    left: -2em;
    z-index: 2;
    cursor: pointer;
    height: 1em;
    width: 1em;
    top: 0;
}

li {
    position: relative;
}

ul {
    list-style: none;
}